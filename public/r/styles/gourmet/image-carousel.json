{
  "name": "image-carousel",
  "type": "registry:ui",
  "dependencies": [
    "motion",
    "@radix-ui/react-use-controllable-state"
  ],
  "files": [
    {
      "path": "annui/image-carousel.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\"\nimport { AnimatePresence, motion } from \"motion/react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { createContext } from \"@/registry/default/lib/context\"\n\nconst ImageCarousel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentPropsWithoutRef<\"div\"> & {\n    defaultValue?: string\n    value?: string\n    onValueChange?: (value: string) => void\n    collapsible?: boolean\n  }\n>(\n  (\n    { defaultValue, value, onValueChange, collapsible, className, ...props },\n    ref\n  ) => {\n    const [activeValue, setActiveValue] = useControllableState({\n      prop: value,\n      defaultProp: defaultValue,\n      onChange: onValueChange,\n    })\n\n    return (\n      <ImageCarouselProvider\n        value={{ activeValue, setActiveValue, collapsible }}\n      >\n        <div className={cn(\"flex gap-2\", className)} ref={ref} {...props} />\n      </ImageCarouselProvider>\n    )\n  }\n)\nImageCarousel.displayName = \"ImageCarousel\"\n\nconst ImageCarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentPropsWithoutRef<typeof motion.div> & {\n    value: string\n    children: React.ReactNode\n  }\n>(({ children, value, className, ...props }, ref) => {\n  const { activeValue, setActiveValue, collapsible } = useImageCarouselContext()\n\n  const isActive = activeValue === value\n\n  const transition = {\n    duration: 0.3,\n    ease: \"easeInOut\",\n  }\n\n  const variants = {\n    active: {\n      width: \"240px\",\n      transition,\n    },\n    inactive: {\n      width: \"48px\",\n      transition,\n    },\n  }\n\n  return (\n    <ImageCarouselItemProvider value={{ isActive }}>\n      <AnimatePresence initial={false}>\n        <motion.div\n          ref={ref}\n          data-active={isActive}\n          className={cn(\n            \"cursor-pointer relative rounded-xl overflow-hidden p-2 h-full transition-shadow duration-300 data-[active=true]:ring-2 data-[active=true]:ring-primary/80 data-[active=true]:ring-offset-2 data-[active=true]:ring-offset-background\",\n            className\n          )}\n          variants={variants}\n          initial=\"inactive\"\n          animate={isActive ? \"active\" : \"inactive\"}\n          onTap={() => {\n            if (collapsible) {\n              setActiveValue(isActive ? undefined : value)\n            } else {\n              setActiveValue(value)\n            }\n          }}\n          {...props}\n        >\n          <motion.div\n            className=\"absolute inset-0 bg-black/40 z-[1]\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: isActive ? 1 : 0 }}\n            transition={transition}\n          />\n          {children}\n        </motion.div>\n      </AnimatePresence>\n    </ImageCarouselItemProvider>\n  )\n})\nImageCarouselItem.displayName = \"ImageCarouselItem\"\n\nconst ImageCarouselItemImage = React.forwardRef<\n  HTMLImageElement,\n  React.ComponentPropsWithoutRef<\"img\">\n>(({ className, ...props }, ref) => {\n  return (\n    <img\n      className={cn(\"absolute inset-0 size-full object-cover\", className)}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nImageCarouselItemImage.displayName = \"ImageCarouselItemImage\"\n\nconst ImageCarouselItemIcon = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      className={cn(\n        \"absolute size-8 [&>svg]:size-4 bg-primary/50 rounded-full flex items-center justify-center\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nImageCarouselItemIcon.displayName = \"ImageCarouselItemIcon\"\n\nconst ImageCarouselItemTitle = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      className={cn(\n        \"ml-[52px] mt-1 text-base font-semibold relative z-10\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nImageCarouselItemTitle.displayName = \"ImageCarouselItemTitle\"\n\nconst ImageCarouselItemDescription = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentPropsWithoutRef<typeof motion.div>\n>(({ className, ...props }, ref) => {\n  const { isActive } = useImageCarouselItemContext()\n\n  const variants = {\n    active: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        delay: 0.3,\n        duration: 0.4,\n        ease: \"easeOut\",\n      },\n    },\n    inactive: {\n      opacity: 0,\n      y: 18,\n      transition: {\n        duration: 0.2,\n        ease: \"easeIn\",\n      },\n    },\n  }\n\n  return (\n    <AnimatePresence initial={false}>\n      {isActive && (\n        <motion.div\n          className={cn(\n            \"ml-[52px] mt-1 text-sm font-medium relative z-10\",\n            className\n          )}\n          ref={ref}\n          variants={variants}\n          initial=\"inactive\"\n          animate=\"active\"\n          exit=\"inactive\"\n          {...props}\n        />\n      )}\n    </AnimatePresence>\n  )\n})\nImageCarouselItemDescription.displayName = \"ImageCarouselItemDescription\"\n\ninterface ImageCarouselContextValue {\n  activeValue?: string\n  setActiveValue: (value?: string) => void\n  collapsible?: boolean\n}\n\ninterface ImageCarouselItemContextValue {\n  isActive: boolean\n}\n\nconst [ImageCarouselProvider, useImageCarouselContext] =\n  createContext<ImageCarouselContextValue>({\n    activeValue: undefined,\n    setActiveValue: () => {},\n    collapsible: false,\n  })\n\nconst [ImageCarouselItemProvider, useImageCarouselItemContext] =\n  createContext<ImageCarouselItemContextValue>({\n    isActive: false,\n  })\n\nexport {\n  ImageCarousel,\n  ImageCarouselItem,\n  ImageCarouselItemImage,\n  ImageCarouselItemIcon,\n  ImageCarouselItemTitle,\n  ImageCarouselItemDescription,\n}\n\nexport { useImageCarouselContext, useImageCarouselItemContext }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}