{
  "name": "tabs-00",
  "type": "registry:ui",
  "dependencies": [
    "motion",
    "@radix-ui/react-tabs",
    "@radix-ui/react-use-controllable-state"
  ],
  "files": [
    {
      "path": "annui/tabs-00.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\"\nimport { AnimatePresence, motion } from \"motion/react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { createContext } from \"@/registry/default/lib/context\"\n\nconst Tabs = React.forwardRef<\n  React.ComponentRef<typeof TabsPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Root>\n>(({ value, onValueChange, defaultValue, ...props }, ref) => {\n  const [activeTab, setActiveTab] = useControllableState({\n    prop: value,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  })\n\n  const [hoverTab, setHoverTab] = React.useState<string | undefined>(undefined)\n\n  return (\n    <TabsProvider value={{ activeTab, setActiveTab, hoverTab, setHoverTab }}>\n      <TabsPrimitive.Root\n        ref={ref}\n        value={activeTab}\n        onValueChange={setActiveTab}\n        {...props}\n      />\n    </TabsProvider>\n  )\n})\nTabs.displayName = \"Tabs00\"\n\nconst TabsList = React.forwardRef<\n  React.ComponentRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ children, className, ...props }, ref) => {\n  return (\n    <AnimatePresence>\n      <TabsPrimitive.List\n        ref={ref}\n        className={cn(\"flex items-center gap-x-4 gap-y-2\", className)}\n        {...props}\n      >\n        {children}\n      </TabsPrimitive.List>\n    </AnimatePresence>\n  )\n})\nTabsList.displayName = \"TabsList00\"\n\nconst TabsTrigger = React.forwardRef<\n  React.ComponentRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger> & {\n    hoverAnimation?: boolean\n  }\n>(({ className, children, hoverAnimation = true, ...props }, ref) => {\n  const { hoverTab, activeTab, setHoverTab } = useTabsContext()\n\n  const variants = {\n    active: { opacity: 1, width: \"100%\" },\n    default: { opacity: 0, width: 0 },\n  }\n\n  return (\n    <TabsPrimitive.Trigger\n      ref={ref}\n      className={cn(\"relative group/tabs-trigger\", className)}\n      onMouseEnter={() => setHoverTab(props.value)}\n      onMouseLeave={() => setHoverTab(undefined)}\n      {...props}\n    >\n      <AnimatePresence initial={false}>\n        {activeTab === props.value && (\n          <motion.span\n            className=\"inline-block absolute h-1 rounded-full w-full bg-primary left-0 bottom-0 z-10\"\n            variants={variants}\n            initial=\"default\"\n            animate=\"active\"\n            exit=\"default\"\n            transition={{ duration: 0.2 }}\n          />\n        )}\n      </AnimatePresence>\n      <motion.div\n        className=\"font-medium text-sm gap-2 inline-flex items-center h-9\"\n        animate={\n          hoverAnimation\n            ? hoverTab === props.value\n              ? { y: -1 }\n              : { y: 0 }\n            : { y: 0 }\n        }\n        transition={{ duration: 0.2 }}\n      >\n        {children}\n      </motion.div>\n    </TabsPrimitive.Trigger>\n  )\n})\nTabsTrigger.displayName = \"TabsTrigger00\"\n\nconst TabsContent = TabsPrimitive.Content\n\ninterface TabsContextValue {\n  activeTab: string | undefined\n  setActiveTab: (tab: string) => void\n\n  hoverTab: string | undefined\n  setHoverTab: (tab: string | undefined) => void\n}\n\nconst [TabsProvider, useTabsContext] = createContext<TabsContextValue>({\n  activeTab: undefined,\n  setActiveTab: () => {},\n  hoverTab: undefined,\n  setHoverTab: () => {},\n})\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\nexport { useTabsContext }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}