{
  "name": "select-filter",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-use-controllable-state",
    "motion",
    "colord"
  ],
  "registryDependencies": [
    "colored-label"
  ],
  "files": [
    {
      "path": "annui/select-filter.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\"\nimport { colord } from \"colord\"\nimport { X } from \"lucide-react\"\nimport { AnimatePresence, motion } from \"motion/react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { createContext } from \"@/registry/default/lib/context\"\n\nimport { ColoredLabel } from \"./colored-label\"\n\nconst transition = {\n  layout: { duration: 0.3, ease: \"easeInOut\" },\n}\n\nconst SelectFilter = React.forwardRef<\n  React.ComponentRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & {\n    value?: string[]\n    onChange?: (value: string[]) => void\n    defaultValue?: string[]\n    children: React.ReactNode\n  }\n>(({ children, className, ...props }, ref) => {\n  const [value, setValue] = useControllableState({\n    prop: props.value,\n    defaultProp: props.defaultValue,\n    onChange: props.onChange,\n  })\n  const [items, setItems] = React.useState<Record<string, SelectFilterItem>>({})\n\n  return (\n    <SelectFilterProvider\n      value={{ value, onChange: setValue, items, setItems }}\n    >\n      <div ref={ref} className=\"flex flex-col gap-2 relative\">\n        {children}\n      </div>\n    </SelectFilterProvider>\n  )\n})\nSelectFilter.displayName = \"SelectFilter\"\n\nconst SelectFilterItem = React.forwardRef<\n  React.ComponentRef<typeof motion.button>,\n  React.ComponentPropsWithoutRef<typeof motion.button> &\n    React.ComponentPropsWithoutRef<typeof ColoredLabel> & {\n      value: string\n      children: React.ReactNode\n    }\n>(\n  (\n    {\n      color,\n      bgOpacity,\n      textOpacity,\n      darkBgOpacity,\n      darkTextOpacity,\n      className,\n      children,\n      style,\n      value,\n      ...props\n    },\n    ref\n  ) => {\n    const {\n      value: selectedValue,\n      onChange,\n      setItems,\n    } = useSelectFilterContext()\n    const isSelected = selectedValue?.includes(value)\n\n    React.useEffect(() => {\n      setItems((prev) => ({\n        ...prev,\n        [value]: {\n          color,\n          children,\n          props: { className },\n        },\n      }))\n    }, [color, value, className, children])\n\n    return (\n      !isSelected && (\n        <ColoredLabel\n          color={color}\n          className={cn(\"rounded-full h-6\", className)}\n          bgOpacity={bgOpacity}\n          textOpacity={textOpacity}\n          darkBgOpacity={darkBgOpacity}\n          darkTextOpacity={darkTextOpacity}\n          asChild\n        >\n          <motion.button\n            ref={ref}\n            transition={transition}\n            layout\n            layoutId={`select-filter-item-${value}`}\n            onClick={() => {\n              onChange((prev) => [...(prev ?? []), value])\n            }}\n            {...props}\n          >\n            {children}\n          </motion.button>\n        </ColoredLabel>\n      )\n    )\n  }\n)\nSelectFilterItem.displayName = \"SelectFilterItem\"\n\nconst SelectFilterSelectedItem = React.forwardRef<\n  React.ComponentRef<typeof motion.button>,\n  {\n    value: string\n  }\n>(({ value }, ref) => {\n  const { value: selectedValue, onChange, items } = useSelectFilterContext()\n  const isSelected = selectedValue?.includes(value)\n  const item = items[value]\n  return (\n    isSelected && (\n      <motion.button\n        ref={ref}\n        className={cn(\n          \"rounded-full text-xs px-1.5 h-6 w-fit font-medium flex items-center gap-0.5\",\n          item?.props?.className\n        )}\n        transition={transition}\n        layout\n        layoutId={`select-filter-item-${value}`}\n        style={{\n          backgroundColor: item?.color\n            ? colord(item.color).alpha(0.1).toRgbString()\n            : undefined,\n          color: item?.color,\n        }}\n        onClick={() => {\n          onChange((prev) => prev?.filter((v) => v !== value))\n        }}\n      >\n        {item?.children}\n        <X className=\"size-2.5\" />\n      </motion.button>\n    )\n  )\n})\nSelectFilterSelectedItem.displayName = \"SelectFilterSelectedItem\"\n\nconst SelectFilterList = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <motion.div layout className=\"flex-shrink-0 w-fit mx-auto\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex flex-col gap-2 bg-popover text-popover-foreground rounded-lg shadow-md p-2 min-w-64\",\n          className\n        )}\n        {...props}\n      />\n    </motion.div>\n  )\n})\nSelectFilterList.displayName = \"SelectFilterList\"\n\nconst SelectFilterHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      className={cn(\"flex justify-between items-center\", className)}\n      {...props}\n    />\n  )\n})\nSelectFilterHeader.displayName = \"SelectFilterHeader\"\n\nconst SelectFilterTitle = React.forwardRef<\n  HTMLHeadingElement,\n  React.ComponentPropsWithoutRef<\"h3\">\n>(({ className, ...props }, ref) => {\n  return (\n    <h3 ref={ref} className={cn(\"text-sm font-medium\", className)} {...props} />\n  )\n})\nSelectFilterTitle.displayName = \"SelectFilterTitle\"\n\nconst SelectFilterClear = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentPropsWithoutRef<\"button\">\n>(({ className, ...props }, ref) => {\n  const { onChange } = useSelectFilterContext()\n  return (\n    <button\n      ref={ref}\n      className={cn(\n        \"text-xs text-muted-foreground hover:text-foreground transition-colors\",\n        className\n      )}\n      onClick={() => {\n        onChange(undefined)\n      }}\n      {...props}\n    />\n  )\n})\nSelectFilterClear.displayName = \"SelectFilterClear\"\n\nconst SelectFilterSelected = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentPropsWithoutRef<\"div\"> & {\n    clearAll?: boolean\n    color?: string\n  }\n>(({ className, color, clearAll = true, ...props }, ref) => {\n  const { value: selectedValue, onChange } = useSelectFilterContext()\n  const [hover, setHover] = React.useState(false)\n\n  const variants = {\n    hidden: { opacity: 0, transform: \"translateX(-16px)\" },\n    visible: { opacity: 1, transform: \"translateX(0)\" },\n  }\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"absolute left-0 -top-12 mt-2 z-50 flex gap-2 p-2 overflow-hidden items-center\",\n        className\n      )}\n      onMouseEnter={() => setHover(true)}\n      onMouseLeave={() => setHover(false)}\n      {...props}\n    >\n      <AnimatePresence>\n        {clearAll && selectedValue && selectedValue.length > 0 && hover && (\n          <motion.button\n            variants={variants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"hidden\"\n            transition={transition}\n            className=\"text-xs text-muted-foreground hover:text-foreground transition-colors text-nowrap\"\n            onClick={() => onChange(undefined)}\n          >\n            Clear All\n          </motion.button>\n        )}\n      </AnimatePresence>\n      {selectedValue?.map((value) => (\n        <SelectFilterSelectedItem key={value} value={value} />\n      ))}\n    </div>\n  )\n})\nSelectFilterSelected.displayName = \"SelectFilterSelected\"\n\ninterface SelectFilterContextValue {\n  value: string[] | undefined\n  onChange: React.Dispatch<React.SetStateAction<string[] | undefined>>\n\n  items: Record<string, SelectFilterItem>\n  setItems: React.Dispatch<\n    React.SetStateAction<Record<string, SelectFilterItem>>\n  >\n}\n\ninterface SelectFilterItem {\n  color?: string\n  children: React.ReactNode\n  props?: {\n    className?: string\n  }\n}\n\nconst [SelectFilterProvider, useSelectFilterContext] =\n  createContext<SelectFilterContextValue>({\n    value: undefined,\n    onChange: () => {},\n    items: {},\n    setItems: () => {},\n  })\n\nexport {\n  SelectFilter,\n  SelectFilterItem,\n  SelectFilterList,\n  SelectFilterHeader,\n  SelectFilterTitle,\n  SelectFilterClear,\n  SelectFilterSelected,\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}